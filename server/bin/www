#!/usr/bin/env node

const http = require('http');

let app = require('../app');

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.render('not-found');
});

app.use((err, req, res, next) => {
  // always log the error
  console.error('ERROR', req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.render('error');
  }
});

let server = http.createServer(app);

server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});

const io = require('socket.io').listen(server)

let userList = []

io.on("connection", socket => {
  console.log("socket connected");

  // socket.on("newUser", user => {
  //   console.log(`${user} connected`);
  //   userList.push(user);
  //   socket.emit("list", userList);
  //   socket.broadcast.emit("list", userList);
  // });

  socket.on('createGame', function(data){
  socket.join('room-' + ++rooms);
  socket.emit('newGame', {name: data.name, room: 'room-'+rooms});
});

// Connect the Player 2 to the room he requested. Show error if room full.
socket.on('joinGame', function(data){
  var room = io.nsps['/'].adapter.rooms[data.room];
  if( room && room.length == 1){
    socket.join(data.room);
    socket.broadcast.to(data.room).emit('player1', {});
    socket.emit('player2', {name: data.name, room: data.room })
  }
  else {
    socket.emit('err', {message: 'Sorry, The room is full!'});
  }
});

//Handle the turn played by either player and notify the other. 
socket.on('playTurn', function(data){
  socket.broadcast.to(data.room).emit('turnPlayed', {
    // tile: data.tile,
    room: data.room
  });
});

socket.on("messageSent", message => {
    console.log(message);
    socket.emit("newMessage", message);
    socket.broadcast.emit("newMessage", message);
  });

  socket.on('gameEnded', (data) => {
        socket.broadcast.to(data.room).emit('gameEnd', data);
    });

});
