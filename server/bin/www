#!/usr/bin/env node

const http = require('http');

let app = require('../app');

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.render('not-found');
});

app.use((err, req, res, next) => {
  // always log the error
  console.error('ERROR', req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.render('error');
  }
});

let server = http.createServer(app);

server.on('error', error => {
  if (error.syscall !== 'listen') {
    throw error
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});

const io = require('socket.io').listen(server)

let userList = []

io.sockets.on('connection',
  // We are given a websocket object in our function
  function (socket) {

    // console.log("We have a new client: " + socket.id);
    socket.on("newUser", user => {
      console.log(`${user} connected`);
      userList.push(user);
      console.log(userList)
      socket.emit("list", userList);
      socket.broadcast.emit("list", userList);
    });

    socket.on("messageSent", message => {
      console.log(message);
      socket.emit("newMessage", message);
      socket.broadcast.emit("newMessage", message);
    });

    // When this user emits, client side: socket.emit('otherevent',some data);
    socket.on('mouse',
      function (data) {
        // Data comes in as whatever was sent, including objects
        // console.log("Received: 'mouse' " + data.x + " " + data.y);

        // Send it to all other clients
        socket.broadcast.emit('mouse', data);

        // This is a way to send to everyone including sender
        // io.sockets.emit('message', "this goes to everyone");

      }
    );

    socket.on('disconnect', function (user) {
      console.log("Client has disconnected");
      userList.filter(e => e !== user)
    });
  }
);